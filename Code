#define B_PUSH_RAX ".byte 0x50\n\t" 
#define B_PUSH_RBX ".byte 0x53\n\t"
#define B_POP_RAX ".byte 0x58\n\t"
#define B_POP_RBX ".byte 0x5b\n\t"
  
#define B_NOP ".byte
0x48,0x87,0xc0\n\t"

#define H_PUSH 0x50
#define H_POP 0x58
#define H_NOP_0 0x48
#define H_NOP_1 0x87
#define H_NOP_2 0xC0
 

#define JUNK_ASM __asm__ __volatile__
(B_PUSH_RBX B_PUSH_RAX B_NOP B_NOP
B_POP_RAX B_POP_RBX)

#define JUNKLEN 10

-----------------


/* Load file in read binary mode */
int32_t load_file(uint8_t **file_data,
uint32_t *file_len, const char
*filename) {

JUNK_ASM;

// Opens file in read binary mode
FILE *fp = fopen(filename, "rb");

// Sets the file position of the
stream to the given offset (0 long int)
fseek(fp, 0L, SEEK_END);

// Sets the length of the file
if (ftell(fp) < 1) {
} else {
*file_len = ftell(fp);
}

// Allocates memory to the length of
the file
*file_data = malloc(*file_len);

// Gets the file position of the
stream to the start of the file
fseek(fp, 0L, SEEK_SET);

// Reads the data into the file
variable in memory
if (fread((void*)*file_data,
*file_len, 1, fp) != 1) {
free(file_data);
return EXIT_FAILURE;
}
 
// Closes the file
fclose(fp);
return EXIT_SUCCESS;
}

--------------






